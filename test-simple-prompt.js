// Ejemplo de uso del nuevo endpoint /vertex-ai/prompt
// Ejecutar: node test-simple-prompt.js

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testSimplePrompt() {
  try {
    console.log('üöÄ Probando el nuevo endpoint /vertex-ai/prompt...\n');

    // 1. Prompt b√°sico
    console.log('1. üìù Enviando prompt b√°sico...');
    try {
      const basicPrompt = {
        prompt: '¬øCu√°les son los beneficios de la inteligencia artificial?'
      };

      console.log('Enviando:', JSON.stringify(basicPrompt, null, 2));
      const response1 = await axios.post(`${BASE_URL}/vertex-ai/prompt`, basicPrompt);
      
      console.log('\n‚úÖ Respuesta recibida:');
      console.log(JSON.stringify(response1.data, null, 2));
      
    } catch (error) {
      console.log('‚ùå Error en prompt b√°sico:', error.response?.data || error.message);
    }

    console.log('\n' + '='.repeat(80) + '\n');

    // 2. Prompt con par√°metros personalizados
    console.log('2. ‚öôÔ∏è Enviando prompt con par√°metros personalizados...');
    try {
      const customPrompt = {
        prompt: 'Escribe un haiku sobre la tecnolog√≠a',
        temperature: 0.9,
        maxTokens: 100
      };

      console.log('Enviando:', JSON.stringify(customPrompt, null, 2));
      const response2 = await axios.post(`${BASE_URL}/vertex-ai/prompt`, customPrompt);
      
      console.log('\n‚úÖ Respuesta recibida:');
      console.log(JSON.stringify(response2.data, null, 2));
      
    } catch (error) {
      console.log('‚ùå Error en prompt personalizado:', error.response?.data || error.message);
    }

    console.log('\n' + '='.repeat(80) + '\n');

    // 3. Prompt para generar JSON estructurado
    console.log('3. üóÇÔ∏è Enviando prompt para generar JSON estructurado...');
    try {
      const jsonPrompt = {
        prompt: 'Genera un perfil de usuario ficticio en formato JSON con los campos: nombre, edad, profesi√≥n, hobbies (array), y ubicaci√≥n. Responde solo con el JSON v√°lido.',
        temperature: 0.5,
        maxTokens: 200
      };

      console.log('Enviando:', JSON.stringify(jsonPrompt, null, 2));
      const response3 = await axios.post(`${BASE_URL}/vertex-ai/prompt`, jsonPrompt);
      
      console.log('\n‚úÖ Respuesta recibida:');
      console.log(JSON.stringify(response3.data, null, 2));
      
      // Intentar parsear el JSON generado
      try {
        const generatedJSON = JSON.parse(response3.data.data.response);
        console.log('\nüéØ JSON parseado exitosamente:');
        console.log(JSON.stringify(generatedJSON, null, 2));
      } catch (parseError) {
        console.log('\n‚ö†Ô∏è El contenido generado no es JSON v√°lido');
      }
      
    } catch (error) {
      console.log('‚ùå Error en prompt JSON:', error.response?.data || error.message);
    }

    console.log('\n' + '='.repeat(80) + '\n');

    // 4. Probar validaci√≥n de errores
    console.log('4. üîç Probando validaci√≥n de errores...');
    try {
      const invalidPrompt = {
        prompt: '', // Prompt vac√≠o
        temperature: 3.0, // Temperatura inv√°lida
        maxTokens: -1 // Tokens inv√°lidos
      };

      console.log('Enviando prompt inv√°lido:', JSON.stringify(invalidPrompt, null, 2));
      const response4 = await axios.post(`${BASE_URL}/vertex-ai/prompt`, invalidPrompt);
      
      console.log('‚ö†Ô∏è No se esperaba respuesta exitosa:', response4.data);
      
    } catch (error) {
      console.log('‚úÖ Error de validaci√≥n capturado correctamente:');
      console.log('Estado HTTP:', error.response?.status);
      console.log('Errores:', JSON.stringify(error.response?.data, null, 2));
    }

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
}

// Funci√≥n para mostrar ejemplos con curl
function showCurlExamples() {
  console.log('\n' + '='.repeat(80));
  console.log('üìã EJEMPLOS CON CURL PARA EL NUEVO ENDPOINT:');
  console.log('='.repeat(80));
  
  console.log('\n1. Prompt b√°sico:');
  console.log(`curl -X POST http://localhost:3000/vertex-ai/prompt \\
  -H "Content-Type: application/json" \\
  -d '{
    "prompt": "Expl√≠came qu√© es el machine learning"
  }'`);
  
  console.log('\n2. Prompt con par√°metros:');
  console.log(`curl -X POST http://localhost:3000/vertex-ai/prompt \\
  -H "Content-Type: application/json" \\
  -d '{
    "prompt": "Crea una lista de 5 consejos para programar mejor",
    "temperature": 0.8,
    "maxTokens": 300
  }'`);
  
  console.log('\n3. Prompt para generar datos estructurados:');
  console.log(`curl -X POST http://localhost:3000/vertex-ai/prompt \\
  -H "Content-Type: application/json" \\
  -d '{
    "prompt": "Genera un array JSON de 3 pa√≠ses con sus capitales y poblaci√≥n",
    "temperature": 0.3,
    "maxTokens": 250
  }'`);
}

// Mostrar ejemplos de curl
showCurlExamples();

// Ejecutar pruebas autom√°ticas
console.log('\n' + '='.repeat(80));
console.log('üß™ INICIANDO PRUEBAS AUTOM√ÅTICAS...');
console.log('='.repeat(80));
console.log('Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:3000');
console.log('Para iniciarlo: npm run start:dev\n');

// Esperar 2 segundos antes de ejecutar las pruebas
setTimeout(testSimplePrompt, 2000);